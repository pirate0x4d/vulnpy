# This is the complete and corrected cloudbuild.yaml file
# It combines the simple, direct execution with secure secret handling.

options:
  pool:
    name: "projects/geotech-cybersecurity/locations/me-central2/workerPools/sonarqube-worker-pool"
  logging: CLOUD_LOGGING_ONLY

# This is the service account the entire build will run as.
serviceAccount: 'projects/geotech-cybersecurity/serviceAccounts/sonar-build-runner@geotech-cybersecurity.iam.gserviceaccount.com'

steps:
  - name: 'sonarsource/sonar-scanner-cli'
    # NO shell entrypoint. We run the scanner directly.
    secretEnv:
      - 'SONAR_HOST'
      - 'SONAR_TOKEN'
    # Set environment variables that the scanner will use
    env:
      # The scanner automatically uses SONAR_TOKEN for authentication
      - 'SONAR_TOKEN=$$SONAR_TOKEN'
      # We also set the memory options here
      - 'SONAR_SCANNER_OPTS=-Xmx2048m'
    args:
      - '-Dsonar.projectKey=pirate0x4d_vulnpy_e23b31f4-6b77-4104-bddb-15b03db2245b'
      - '-Dsonar.sources=.'
      # We still need to pass the host URL from the secret
      - '-Dsonar.host.url=$$SONAR_HOST'
      # We DO NOT need to pass sonar.login, as SONAR_TOKEN is used automatically
      - '-Dsonar.branch.name=${_BRANCH_NAME}'

# This block tells Cloud Build to fetch the specified secrets from Secret Manager
availableSecrets:
  secretManager:
    - versionName: projects/geotech-cybersecurity/secrets/SONAR_HOST_URL/versions/latest
      env: 'SONAR_HOST'
    - versionName: projects/geotech-cybersecurity/secrets/SONAR_LOGIN_TOKEN/versions/latest
      env: 'SONAR_TOKEN'

# This block defines user-defined variables
substitutions:
  _BRANCH_NAME: 'master'
